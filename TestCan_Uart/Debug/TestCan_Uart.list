
TestCan_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000193c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001a48  08001a48  00011a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a60  08001a60  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001a60  08001a60  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a60  08001a60  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a64  08001a64  00011a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000083c  20000008  08001a70  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08001a70  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   000047b9  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001992  00000000  00000000  0002482d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  000261c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004de  00000000  00000000  00026898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00012d2d  00000000  00000000  00026d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008818  00000000  00000000  00039aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005fff4  00000000  00000000  000422bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000018c8  00000000  00000000  000a22b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a3b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a30 	.word	0x08001a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08001a30 	.word	0x08001a30

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	db0b      	blt.n	80001da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	f003 021f 	and.w	r2, r3, #31
 80001c8:	4906      	ldr	r1, [pc, #24]	; (80001e4 <__NVIC_EnableIRQ+0x34>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	095b      	lsrs	r3, r3, #5
 80001d0:	2001      	movs	r0, #1
 80001d2:	fa00 f202 	lsl.w	r2, r0, r2
 80001d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001da:	bf00      	nop
 80001dc:	370c      	adds	r7, #12
 80001de:	46bd      	mov	sp, r7
 80001e0:	bc80      	pop	{r7}
 80001e2:	4770      	bx	lr
 80001e4:	e000e100 	.word	0xe000e100

080001e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	db0a      	blt.n	8000212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	490c      	ldr	r1, [pc, #48]	; (8000234 <__NVIC_SetPriority+0x4c>)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	0112      	lsls	r2, r2, #4
 8000208:	b2d2      	uxtb	r2, r2
 800020a:	440b      	add	r3, r1
 800020c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000210:	e00a      	b.n	8000228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	b2da      	uxtb	r2, r3
 8000216:	4908      	ldr	r1, [pc, #32]	; (8000238 <__NVIC_SetPriority+0x50>)
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	3b04      	subs	r3, #4
 8000220:	0112      	lsls	r2, r2, #4
 8000222:	b2d2      	uxtb	r2, r2
 8000224:	440b      	add	r3, r1
 8000226:	761a      	strb	r2, [r3, #24]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023c:	b480      	push	{r7}
 800023e:	b089      	sub	sp, #36	; 0x24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	f003 0307 	and.w	r3, r3, #7
 800024e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000250:	69fb      	ldr	r3, [r7, #28]
 8000252:	f1c3 0307 	rsb	r3, r3, #7
 8000256:	2b04      	cmp	r3, #4
 8000258:	bf28      	it	cs
 800025a:	2304      	movcs	r3, #4
 800025c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800025e:	69fb      	ldr	r3, [r7, #28]
 8000260:	3304      	adds	r3, #4
 8000262:	2b06      	cmp	r3, #6
 8000264:	d902      	bls.n	800026c <NVIC_EncodePriority+0x30>
 8000266:	69fb      	ldr	r3, [r7, #28]
 8000268:	3b03      	subs	r3, #3
 800026a:	e000      	b.n	800026e <NVIC_EncodePriority+0x32>
 800026c:	2300      	movs	r3, #0
 800026e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000270:	f04f 32ff 	mov.w	r2, #4294967295
 8000274:	69bb      	ldr	r3, [r7, #24]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	43da      	mvns	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	401a      	ands	r2, r3
 8000280:	697b      	ldr	r3, [r7, #20]
 8000282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000284:	f04f 31ff 	mov.w	r1, #4294967295
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	43d9      	mvns	r1, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	4313      	orrs	r3, r2
         );
}
 8000296:	4618      	mov	r0, r3
 8000298:	3724      	adds	r7, #36	; 0x24
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <LL_RCC_HSE_Enable+0x18>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <LL_RCC_HSE_Enable+0x18>)
 80002aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40021000 	.word	0x40021000

080002bc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <LL_RCC_HSE_IsReady+0x20>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80002cc:	bf0c      	ite	eq
 80002ce:	2301      	moveq	r3, #1
 80002d0:	2300      	movne	r3, #0
 80002d2:	b2db      	uxtb	r3, r3
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <LL_RCC_SetSysClkSource+0x24>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	f023 0203 	bic.w	r2, r3, #3
 80002f0:	4904      	ldr	r1, [pc, #16]	; (8000304 <LL_RCC_SetSysClkSource+0x24>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	604b      	str	r3, [r1, #4]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40021000 	.word	0x40021000

08000308 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800030c:	4b03      	ldr	r3, [pc, #12]	; (800031c <LL_RCC_GetSysClkSource+0x14>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	f003 030c 	and.w	r3, r3, #12
}
 8000314:	4618      	mov	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000

08000320 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <LL_RCC_SetAHBPrescaler+0x24>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000330:	4904      	ldr	r1, [pc, #16]	; (8000344 <LL_RCC_SetAHBPrescaler+0x24>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	604b      	str	r3, [r1, #4]
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	bc80      	pop	{r7}
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000352:	685b      	ldr	r3, [r3, #4]
 8000354:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <LL_RCC_SetAPB1Prescaler+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	604b      	str	r3, [r1, #4]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	bc80      	pop	{r7}
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000

08000370 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <LL_RCC_SetAPB2Prescaler+0x24>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000380:	4904      	ldr	r1, [pc, #16]	; (8000394 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	4313      	orrs	r3, r2
 8000386:	604b      	str	r3, [r1, #4]
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800039c:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <LL_RCC_PLL_Enable+0x18>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a03      	ldr	r2, [pc, #12]	; (80003b0 <LL_RCC_PLL_Enable+0x18>)
 80003a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_RCC_PLL_IsReady+0x20>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80003c4:	bf0c      	ite	eq
 80003c6:	2301      	moveq	r3, #1
 80003c8:	2300      	movne	r3, #0
 80003ca:	b2db      	uxtb	r3, r3
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	430b      	orrs	r3, r1
 80003f4:	4903      	ldr	r1, [pc, #12]	; (8000404 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003f6:	4313      	orrs	r3, r2
 80003f8:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000412:	69da      	ldr	r2, [r3, #28]
 8000414:	4907      	ldr	r1, [pc, #28]	; (8000434 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4313      	orrs	r3, r2
 800041a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <LL_APB1_GRP1_EnableClock+0x2c>)
 800041e:	69da      	ldr	r2, [r3, #28]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4013      	ands	r3, r2
 8000424:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000426:	68fb      	ldr	r3, [r7, #12]
}
 8000428:	bf00      	nop
 800042a:	3714      	adds	r7, #20
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	40021000 	.word	0x40021000

08000438 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000442:	699a      	ldr	r2, [r3, #24]
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4313      	orrs	r3, r2
 800044a:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <LL_APB2_GRP1_EnableClock+0x2c>)
 800044e:	699a      	ldr	r2, [r3, #24]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4013      	ands	r3, r2
 8000454:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000456:	68fb      	ldr	r3, [r7, #12]
}
 8000458:	bf00      	nop
 800045a:	3714      	adds	r7, #20
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <LL_FLASH_SetLatency+0x24>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f023 0207 	bic.w	r2, r3, #7
 8000478:	4904      	ldr	r1, [pc, #16]	; (800048c <LL_FLASH_SetLatency+0x24>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4313      	orrs	r3, r2
 800047e:	600b      	str	r3, [r1, #0]
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40022000 	.word	0x40022000

08000490 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000494:	4b03      	ldr	r3, [pc, #12]	; (80004a4 <LL_FLASH_GetLatency+0x14>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	f003 0307 	and.w	r3, r3, #7
}
 800049c:	4618      	mov	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc80      	pop	{r7}
 80004a2:	4770      	bx	lr
 80004a4:	40022000 	.word	0x40022000

080004a8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	60da      	str	r2, [r3, #12]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr

080004c6 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b083      	sub	sp, #12
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	691b      	ldr	r3, [r3, #16]
 80004d2:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	615a      	str	r2, [r3, #20]
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	0a1b      	lsrs	r3, r3, #8
 80004fe:	b29a      	uxth	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	615a      	str	r2, [r3, #20]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	bc80      	pop	{r7}
 800050c:	4770      	bx	lr
	...

08000510 <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 8000516:	685b      	ldr	r3, [r3, #4]
 8000518:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 800051e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000522:	6053      	str	r3, [r2, #4]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40010000 	.word	0x40010000

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff ff7f 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800053a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800053e:	f7ff ff63 	bl	8000408 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000542:	2003      	movs	r0, #3
 8000544:	f7ff fe02 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000548:	f7ff fe24 	bl	8000194 <__NVIC_GetPriorityGrouping>
 800054c:	4603      	mov	r3, r0
 800054e:	2200      	movs	r2, #0
 8000550:	210f      	movs	r1, #15
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff fe72 	bl	800023c <NVIC_EncodePriority>
 8000558:	4603      	mov	r3, r0
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f7ff fe42 	bl	80001e8 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000564:	f7ff ffd4 	bl	8000510 <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f806 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f8aa 	bl	80006c4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  vInit();
 8000570:	f001 f8b2 	bl	80016d8 <vInit>
  while (1)
 8000574:	e7fe      	b.n	8000574 <main+0x44>
	...

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800057c:	2002      	movs	r0, #2
 800057e:	f7ff ff73 	bl	8000468 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000582:	bf00      	nop
 8000584:	f7ff ff84 	bl	8000490 <LL_FLASH_GetLatency>
 8000588:	4603      	mov	r3, r0
 800058a:	2b02      	cmp	r3, #2
 800058c:	d1fa      	bne.n	8000584 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800058e:	f7ff fe87 	bl	80002a0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000592:	bf00      	nop
 8000594:	f7ff fe92 	bl	80002bc <LL_RCC_HSE_IsReady>
 8000598:	4603      	mov	r3, r0
 800059a:	2b01      	cmp	r3, #1
 800059c:	d1fa      	bne.n	8000594 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800059e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 80005a2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005a6:	f7ff ff17 	bl	80003d8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80005aa:	f7ff fef5 	bl	8000398 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80005ae:	bf00      	nop
 80005b0:	f7ff ff00 	bl	80003b4 <LL_RCC_PLL_IsReady>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d1fa      	bne.n	80005b0 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff feb0 	bl	8000320 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80005c0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80005c4:	f7ff fec0 	bl	8000348 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f7ff fed1 	bl	8000370 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80005ce:	2002      	movs	r0, #2
 80005d0:	f7ff fe86 	bl	80002e0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80005d4:	bf00      	nop
 80005d6:	f7ff fe97 	bl	8000308 <LL_RCC_GetSysClkSource>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b08      	cmp	r3, #8
 80005de:	d1fa      	bne.n	80005d6 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <SystemClock_Config+0x78>)
 80005e2:	f000 fc35 	bl	8000e50 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80005e6:	4802      	ldr	r0, [pc, #8]	; (80005f0 <SystemClock_Config+0x78>)
 80005e8:	f000 fc40 	bl	8000e6c <LL_SetSystemCoreClock>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	044aa200 	.word	0x044aa200

080005f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]
 800060a:	615a      	str	r2, [r3, #20]
 800060c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	463b      	mov	r3, r7
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 800061c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000620:	f7ff ff0a 	bl	8000438 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000624:	2004      	movs	r0, #4
 8000626:	f7ff ff07 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_USART1_UART_Init+0xc0>)
 800062c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800062e:	2309      	movs	r3, #9
 8000630:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	481e      	ldr	r0, [pc, #120]	; (80006b8 <MX_USART1_UART_Init+0xc4>)
 8000640:	f000 f97d 	bl	800093e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000644:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_USART1_UART_Init+0xc8>)
 8000646:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000648:	2304      	movs	r3, #4
 800064a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064c:	463b      	mov	r3, r7
 800064e:	4619      	mov	r1, r3
 8000650:	4819      	ldr	r0, [pc, #100]	; (80006b8 <MX_USART1_UART_Init+0xc4>)
 8000652:	f000 f974 	bl	800093e <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000656:	f7ff fd9d 	bl	8000194 <__NVIC_GetPriorityGrouping>
 800065a:	4603      	mov	r3, r0
 800065c:	2200      	movs	r2, #0
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fdeb 	bl	800023c <NVIC_EncodePriority>
 8000666:	4603      	mov	r3, r0
 8000668:	4619      	mov	r1, r3
 800066a:	2025      	movs	r0, #37	; 0x25
 800066c:	f7ff fdbc 	bl	80001e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8000670:	2025      	movs	r0, #37	; 0x25
 8000672:	f7ff fd9d 	bl	80001b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000676:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800067a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000688:	230c      	movs	r3, #12
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000690:	2300      	movs	r3, #0
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 800069c:	f000 fb5e 	bl	8000d5c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 80006a0:	4807      	ldr	r0, [pc, #28]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 80006a2:	f7ff ff10 	bl	80004c6 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_USART1_UART_Init+0xcc>)
 80006a8:	f7ff fefe 	bl	80004a8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3730      	adds	r7, #48	; 0x30
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	04020002 	.word	0x04020002
 80006b8:	40010800 	.word	0x40010800
 80006bc:	04040004 	.word	0x04040004
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80006d8:	2010      	movs	r0, #16
 80006da:	f7ff fead 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80006de:	2020      	movs	r0, #32
 80006e0:	f7ff feaa 	bl	8000438 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80006e4:	2004      	movs	r0, #4
 80006e6:	f7ff fea7 	bl	8000438 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 80006ea:	490a      	ldr	r1, [pc, #40]	; (8000714 <MX_GPIO_Init+0x50>)
 80006ec:	480a      	ldr	r0, [pc, #40]	; (8000718 <MX_GPIO_Init+0x54>)
 80006ee:	f7ff feff 	bl	80004f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_GPIO_Init+0x50>)
 80006f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80006f6:	2301      	movs	r3, #1
 80006f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_GPIO_Init+0x54>)
 8000708:	f000 f919 	bl	800093e <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	04200020 	.word	0x04200020
 8000718:	40011000 	.word	0x40011000

0800071c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <NMI_Handler+0x4>

08000722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000726:	e7fe      	b.n	8000726 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	e7fe      	b.n	800072c <MemManage_Handler+0x4>

0800072e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072e:	b480      	push	{r7}
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000732:	e7fe      	b.n	8000732 <BusFault_Handler+0x4>

08000734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000738:	e7fe      	b.n	8000738 <UsageFault_Handler+0x4>

0800073a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800073a:	b480      	push	{r7}
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800073e:	bf00      	nop
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr

0800075e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075e:	b580      	push	{r7, lr}
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	vSysRunModeTick();
 8000762:	f000 fff9 	bl	8001758 <vSysRunModeTick>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}

0800076a <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	vUSART_ITCallBack();
 800076e:	f000 fe39 	bl	80013e4 <vUSART_ITCallBack>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
	...

08000784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000784:	f7ff fff7 	bl	8000776 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800078a:	490c      	ldr	r1, [pc, #48]	; (80007bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800078c:	4a0c      	ldr	r2, [pc, #48]	; (80007c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800078e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000790:	e002      	b.n	8000798 <LoopCopyDataInit>

08000792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000796:	3304      	adds	r3, #4

08000798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800079c:	d3f9      	bcc.n	8000792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a0:	4c09      	ldr	r4, [pc, #36]	; (80007c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a4:	e001      	b.n	80007aa <LoopFillZerobss>

080007a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a8:	3204      	adds	r2, #4

080007aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007ac:	d3fb      	bcc.n	80007a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ae:	f001 f91b 	bl	80019e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007b2:	f7ff febd 	bl	8000530 <main>
  bx lr
 80007b6:	4770      	bx	lr
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80007c0:	08001a68 	.word	0x08001a68
  ldr r2, =_sbss
 80007c4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80007c8:	20000844 	.word	0x20000844

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>

080007ce <LL_GPIO_SetPinMode>:
{
 80007ce:	b490      	push	{r4, r7}
 80007d0:	b088      	sub	sp, #32
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	60f8      	str	r0, [r7, #12]
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	461a      	mov	r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	4413      	add	r3, r2
 80007e4:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80007e6:	6822      	ldr	r2, [r4, #0]
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa93 f3a3 	rbit	r3, r3
 80007f2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80007f4:	693b      	ldr	r3, [r7, #16]
 80007f6:	fab3 f383 	clz	r3, r3
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	210f      	movs	r1, #15
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	401a      	ands	r2, r3
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800080c:	69fb      	ldr	r3, [r7, #28]
 800080e:	fa93 f3a3 	rbit	r3, r3
 8000812:	61bb      	str	r3, [r7, #24]
  return result;
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fab3 f383 	clz	r3, r3
 800081a:	b2db      	uxtb	r3, r3
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	6023      	str	r3, [r4, #0]
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bc90      	pop	{r4, r7}
 8000830:	4770      	bx	lr

08000832 <LL_GPIO_SetPinSpeed>:
{
 8000832:	b490      	push	{r4, r7}
 8000834:	b088      	sub	sp, #32
 8000836:	af00      	add	r7, sp, #0
 8000838:	60f8      	str	r0, [r7, #12]
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	461a      	mov	r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	0e1b      	lsrs	r3, r3, #24
 8000846:	4413      	add	r3, r2
 8000848:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800084a:	6822      	ldr	r2, [r4, #0]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa93 f3a3 	rbit	r3, r3
 8000856:	613b      	str	r3, [r7, #16]
  return result;
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	fab3 f383 	clz	r3, r3
 800085e:	b2db      	uxtb	r3, r3
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	2103      	movs	r1, #3
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	401a      	ands	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	fa93 f3a3 	rbit	r3, r3
 8000876:	61bb      	str	r3, [r7, #24]
  return result;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	fab3 f383 	clz	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	6023      	str	r3, [r4, #0]
}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bc90      	pop	{r4, r7}
 8000894:	4770      	bx	lr

08000896 <LL_GPIO_SetPinOutputType>:
{
 8000896:	b490      	push	{r4, r7}
 8000898:	b088      	sub	sp, #32
 800089a:	af00      	add	r7, sp, #0
 800089c:	60f8      	str	r0, [r7, #12]
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	0e1b      	lsrs	r3, r3, #24
 80008aa:	4413      	add	r3, r2
 80008ac:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80008ae:	6822      	ldr	r2, [r4, #0]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa93 f3a3 	rbit	r3, r3
 80008ba:	613b      	str	r3, [r7, #16]
  return result;
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	fab3 f383 	clz	r3, r3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	2104      	movs	r1, #4
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	401a      	ands	r2, r3
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	fa93 f3a3 	rbit	r3, r3
 80008da:	61bb      	str	r3, [r7, #24]
  return result;
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fab3 f383 	clz	r3, r3
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	6023      	str	r3, [r4, #0]
}
 80008f0:	bf00      	nop
 80008f2:	3720      	adds	r7, #32
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc90      	pop	{r4, r7}
 80008f8:	4770      	bx	lr

080008fa <LL_GPIO_SetPinPull>:
{
 80008fa:	b480      	push	{r7}
 80008fc:	b087      	sub	sp, #28
 80008fe:	af00      	add	r7, sp, #0
 8000900:	60f8      	str	r0, [r7, #12]
 8000902:	60b9      	str	r1, [r7, #8]
 8000904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	0a1b      	lsrs	r3, r3, #8
 800090e:	43db      	mvns	r3, r3
 8000910:	401a      	ands	r2, r3
 8000912:	68bb      	ldr	r3, [r7, #8]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	fa93 f3a3 	rbit	r3, r3
 800091e:	613b      	str	r3, [r7, #16]
  return result;
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	fab3 f383 	clz	r3, r3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	4619      	mov	r1, r3
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	408b      	lsls	r3, r1
 800092e:	431a      	orrs	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	371c      	adds	r7, #28
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b088      	sub	sp, #32
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
 8000946:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	021b      	lsls	r3, r3, #8
 800094e:	0c1b      	lsrs	r3, r3, #16
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000956:	693b      	ldr	r3, [r7, #16]
 8000958:	fa93 f3a3 	rbit	r3, r3
 800095c:	60fb      	str	r3, [r7, #12]
  return result;
 800095e:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000960:	fab3 f383 	clz	r3, r3
 8000964:	b2db      	uxtb	r3, r3
 8000966:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000968:	e044      	b.n	80009f4 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800096a:	2201      	movs	r2, #1
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	409a      	lsls	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	4013      	ands	r3, r2
 8000974:	2b00      	cmp	r3, #0
 8000976:	d03a      	beq.n	80009ee <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	2b07      	cmp	r3, #7
 800097c:	d806      	bhi.n	800098c <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800097e:	f240 1201 	movw	r2, #257	; 0x101
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	e008      	b.n	800099e <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	3b08      	subs	r3, #8
 8000990:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800099c:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b08      	cmp	r3, #8
 80009a4:	d106      	bne.n	80009b4 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	691b      	ldr	r3, [r3, #16]
 80009aa:	461a      	mov	r2, r3
 80009ac:	69b9      	ldr	r1, [r7, #24]
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f7ff ffa3 	bl	80008fa <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	461a      	mov	r2, r3
 80009ba:	69b9      	ldr	r1, [r7, #24]
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff06 	bl	80007ce <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d003      	beq.n	80009d2 <LL_GPIO_Init+0x94>
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	2b09      	cmp	r3, #9
 80009d0:	d10d      	bne.n	80009ee <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	461a      	mov	r2, r3
 80009d8:	69b9      	ldr	r1, [r7, #24]
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f7ff ff29 	bl	8000832 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	461a      	mov	r2, r3
 80009e6:	69b9      	ldr	r1, [r7, #24]
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff54 	bl	8000896 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3301      	adds	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80009f4:	697a      	ldr	r2, [r7, #20]
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	fa22 f303 	lsr.w	r3, r2, r3
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1b4      	bne.n	800096a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3720      	adds	r7, #32
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <LL_RCC_GetSysClkSource>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <LL_RCC_GetSysClkSource+0x14>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 030c 	and.w	r3, r3, #12
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000

08000a24 <LL_RCC_GetAHBPrescaler>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <LL_RCC_GetAHBPrescaler+0x14>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000

08000a3c <LL_RCC_GetAPB1Prescaler>:
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000

08000a54 <LL_RCC_GetAPB2Prescaler>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <LL_RCC_GetAPB2Prescaler+0x14>)
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	40021000 	.word	0x40021000

08000a6c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <LL_RCC_PLL_GetMainSource+0x14>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	40021000 	.word	0x40021000

08000a84 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000

08000a9c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <LL_RCC_PLL_GetPrediv+0x18>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	0c5b      	lsrs	r3, r3, #17
 8000aa6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000ac0:	f000 f820 	bl	8000b04 <RCC_GetSystemClockFreq>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f000 f83e 	bl	8000b50 <RCC_GetHCLKClockFreq>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f84c 	bl	8000b7c <RCC_GetPCLK1ClockFreq>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f858 	bl	8000ba4 <RCC_GetPCLK2ClockFreq>
 8000af4:	4602      	mov	r2, r0
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60da      	str	r2, [r3, #12]
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8000b0e:	f7ff ff7d 	bl	8000a0c <LL_RCC_GetSysClkSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d00c      	beq.n	8000b32 <RCC_GetSystemClockFreq+0x2e>
 8000b18:	2b08      	cmp	r3, #8
 8000b1a:	d80e      	bhi.n	8000b3a <RCC_GetSystemClockFreq+0x36>
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d002      	beq.n	8000b26 <RCC_GetSystemClockFreq+0x22>
 8000b20:	2b04      	cmp	r3, #4
 8000b22:	d003      	beq.n	8000b2c <RCC_GetSystemClockFreq+0x28>
 8000b24:	e009      	b.n	8000b3a <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <RCC_GetSystemClockFreq+0x48>)
 8000b28:	607b      	str	r3, [r7, #4]
      break;
 8000b2a:	e009      	b.n	8000b40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <RCC_GetSystemClockFreq+0x48>)
 8000b2e:	607b      	str	r3, [r7, #4]
      break;
 8000b30:	e006      	b.n	8000b40 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8000b32:	f000 f84b 	bl	8000bcc <RCC_PLL_GetFreqDomain_SYS>
 8000b36:	6078      	str	r0, [r7, #4]
      break;
 8000b38:	e002      	b.n	8000b40 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <RCC_GetSystemClockFreq+0x48>)
 8000b3c:	607b      	str	r3, [r7, #4]
      break;
 8000b3e:	bf00      	nop
  }

  return frequency;
 8000b40:	687b      	ldr	r3, [r7, #4]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	007a1200 	.word	0x007a1200

08000b50 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8000b58:	f7ff ff64 	bl	8000a24 <LL_RCC_GetAHBPrescaler>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	091b      	lsrs	r3, r3, #4
 8000b60:	f003 030f 	and.w	r3, r3, #15
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <RCC_GetHCLKClockFreq+0x28>)
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	40d3      	lsrs	r3, r2
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	08001a48 	.word	0x08001a48

08000b7c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8000b84:	f7ff ff5a 	bl	8000a3c <LL_RCC_GetAPB1Prescaler>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <RCC_GetPCLK1ClockFreq+0x24>)
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	461a      	mov	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	40d3      	lsrs	r3, r2
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	08001a58 	.word	0x08001a58

08000ba4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8000bac:	f7ff ff52 	bl	8000a54 <LL_RCC_GetAPB2Prescaler>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	0adb      	lsrs	r3, r3, #11
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <RCC_GetPCLK2ClockFreq+0x24>)
 8000bb6:	5cd3      	ldrb	r3, [r2, r3]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	40d3      	lsrs	r3, r2
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	08001a58 	.word	0x08001a58

08000bcc <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8000bda:	f7ff ff47 	bl	8000a6c <LL_RCC_PLL_GetMainSource>
 8000bde:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bec:	d003      	beq.n	8000bf6 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8000bee:	e00b      	b.n	8000c08 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000bf2:	607b      	str	r3, [r7, #4]
      break;
 8000bf4:	e00b      	b.n	8000c0e <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 8000bf6:	f7ff ff51 	bl	8000a9c <LL_RCC_PLL_GetPrediv>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a0b      	ldr	r2, [pc, #44]	; (8000c2c <RCC_PLL_GetFreqDomain_SYS+0x60>)
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	607b      	str	r3, [r7, #4]
      break;
 8000c06:	e002      	b.n	8000c0e <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 8000c08:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8000c0a:	607b      	str	r3, [r7, #4]
      break;
 8000c0c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8000c0e:	f7ff ff39 	bl	8000a84 <LL_RCC_PLL_GetMultiplicator>
 8000c12:	4603      	mov	r3, r0
 8000c14:	0c9b      	lsrs	r3, r3, #18
 8000c16:	3302      	adds	r3, #2
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	fb02 f303 	mul.w	r3, r2, r3
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	003d0900 	.word	0x003d0900
 8000c2c:	007a1200 	.word	0x007a1200

08000c30 <LL_USART_IsEnabled>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c44:	bf0c      	ite	eq
 8000c46:	2301      	moveq	r3, #1
 8000c48:	2300      	movne	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bc80      	pop	{r7}
 8000c54:	4770      	bx	lr

08000c56 <LL_USART_SetStopBitsLength>:
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	611a      	str	r2, [r3, #16]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <LL_USART_SetHWFlowCtrl>:
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	615a      	str	r2, [r3, #20]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
	...

08000ca0 <LL_USART_SetBaudRate>:
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	4613      	mov	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	4413      	add	r3, r2
 8000cb4:	009a      	lsls	r2, r3, #2
 8000cb6:	441a      	add	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc0:	4a25      	ldr	r2, [pc, #148]	; (8000d58 <LL_USART_SetBaudRate+0xb8>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	b299      	uxth	r1, r3
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009a      	lsls	r2, r3, #2
 8000cd8:	441a      	add	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <LL_USART_SetBaudRate+0xb8>)
 8000ce4:	fba3 0302 	umull	r0, r3, r3, r2
 8000ce8:	095b      	lsrs	r3, r3, #5
 8000cea:	2064      	movs	r0, #100	; 0x64
 8000cec:	fb00 f303 	mul.w	r3, r0, r3
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	3332      	adds	r3, #50	; 0x32
 8000cf6:	4a18      	ldr	r2, [pc, #96]	; (8000d58 <LL_USART_SetBaudRate+0xb8>)
 8000cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfc:	095b      	lsrs	r3, r3, #5
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	440b      	add	r3, r1
 8000d08:	b299      	uxth	r1, r3
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	009a      	lsls	r2, r3, #2
 8000d14:	441a      	add	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <LL_USART_SetBaudRate+0xb8>)
 8000d20:	fba3 0302 	umull	r0, r3, r3, r2
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	2064      	movs	r0, #100	; 0x64
 8000d28:	fb00 f303 	mul.w	r3, r0, r3
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	3332      	adds	r3, #50	; 0x32
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <LL_USART_SetBaudRate+0xb8>)
 8000d34:	fba2 2303 	umull	r2, r3, r2, r3
 8000d38:	095b      	lsrs	r3, r3, #5
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	440b      	add	r3, r1
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	609a      	str	r2, [r3, #8]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	51eb851f 	.word	0x51eb851f

08000d5c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ff5e 	bl	8000c30 <LL_USART_IsEnabled>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d145      	bne.n	8000e06 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000d82:	f023 030c 	bic.w	r3, r3, #12
 8000d86:	683a      	ldr	r2, [r7, #0]
 8000d88:	6851      	ldr	r1, [r2, #4]
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	68d2      	ldr	r2, [r2, #12]
 8000d8e:	4311      	orrs	r1, r2
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	6912      	ldr	r2, [r2, #16]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4619      	mov	r1, r3
 8000da2:	6878      	ldr	r0, [r7, #4]
 8000da4:	f7ff ff57 	bl	8000c56 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4619      	mov	r1, r3
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f7ff ff63 	bl	8000c7a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fe7d 	bl	8000ab8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <LL_USART_Init+0xb4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d102      	bne.n	8000dcc <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	e00c      	b.n	8000de6 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a11      	ldr	r2, [pc, #68]	; (8000e14 <LL_USART_Init+0xb8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d102      	bne.n	8000dda <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	e005      	b.n	8000de6 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <LL_USART_Init+0xbc>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00c      	beq.n	8000e06 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d008      	beq.n	8000e06 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8000df4:	2300      	movs	r3, #0
 8000df6:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	69b9      	ldr	r1, [r7, #24]
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff4d 	bl	8000ca0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8000e06:	7ffb      	ldrb	r3, [r7, #31]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013800 	.word	0x40013800
 8000e14:	40004400 	.word	0x40004400
 8000e18:	40004800 	.word	0x40004800

08000e1c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2e:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <LL_InitTick+0x30>)
 8000e30:	3b01      	subs	r3, #1
 8000e32:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <LL_InitTick+0x30>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <LL_InitTick+0x30>)
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffdd 	bl	8000e1c <LL_InitTick>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000e74:	4a03      	ldr	r2, [pc, #12]	; (8000e84 <LL_SetSystemCoreClock+0x18>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr
 8000e84:	20000000 	.word	0x20000000

08000e88 <LL_GPIO_TogglePin>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	60fb      	str	r3, [r7, #12]
  uint32_t pinmask = ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	0a1b      	lsrs	r3, r3, #8
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	60bb      	str	r3, [r7, #8]
  WRITE_REG(GPIOx->BSRR, ((odr & pinmask) << 16u) | (~odr & pinmask));
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	400b      	ands	r3, r1
 8000eb0:	431a      	orrs	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	611a      	str	r2, [r3, #16]
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <vLed_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vLed_Init(const void* configPtr)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

	bLedInit = true;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <vLed_Init+0x18>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
	(void)configPtr;
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000024 	.word	0x20000024

08000edc <vLed_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vLed_MainFunction(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

	if (false == bLedInit)
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <vLed_MainFunction+0x3c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d110      	bne.n	8000f10 <vLed_MainFunction+0x34>
	{
		return;
	}
	else
	{
		if (0 < u16_TimeOut--)
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <vLed_MainFunction+0x40>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	b291      	uxth	r1, r2
 8000ef6:	4a09      	ldr	r2, [pc, #36]	; (8000f1c <vLed_MainFunction+0x40>)
 8000ef8:	8011      	strh	r1, [r2, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10a      	bne.n	8000f14 <vLed_MainFunction+0x38>
		{
			return;
		}
		else
		{
			TOGGLE_LED();
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <vLed_MainFunction+0x44>)
 8000f00:	4808      	ldr	r0, [pc, #32]	; (8000f24 <vLed_MainFunction+0x48>)
 8000f02:	f7ff ffc1 	bl	8000e88 <LL_GPIO_TogglePin>
			u16_TimeOut = TIME_OUT_FOR_1S;
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <vLed_MainFunction+0x40>)
 8000f08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000f0c:	801a      	strh	r2, [r3, #0]
 8000f0e:	e002      	b.n	8000f16 <vLed_MainFunction+0x3a>
		return;
 8000f10:	bf00      	nop
 8000f12:	e000      	b.n	8000f16 <vLed_MainFunction+0x3a>
			return;
 8000f14:	bf00      	nop
		}
	}

}
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000024 	.word	0x20000024
 8000f1c:	20000004 	.word	0x20000004
 8000f20:	04200020 	.word	0x04200020
 8000f24:	40011000 	.word	0x40011000

08000f28 <LL_APB2_GRP1_EnableClock>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f32:	699a      	ldr	r2, [r3, #24]
 8000f34:	4907      	ldr	r1, [pc, #28]	; (8000f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000f3e:	699a      	ldr	r2, [r3, #24]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4013      	ands	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <vCan_Init>:

static uint8_t u8_CanStatus;
static volatile uint8_t RxIndx;

void vCan_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	u8_CanStatus = 0u;
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <vCan_Init+0x100>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
	RCC->APB1ENR|= RCC_APB1ENR_CAN1EN; 		/*Enable Can Clock*/
 8000f62:	4b3e      	ldr	r3, [pc, #248]	; (800105c <vCan_Init+0x104>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a3d      	ldr	r2, [pc, #244]	; (800105c <vCan_Init+0x104>)
 8000f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f6c:	61d3      	str	r3, [r2, #28]
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);	/*Enable PortA Clock*/
 8000f6e:	2004      	movs	r0, #4
 8000f70:	f7ff ffda 	bl	8000f28 <LL_APB2_GRP1_EnableClock>

	/*Set RX and Tx Pin*/
#ifndef USECMSIS_FORCAN
	/* PA11 - CAN_RX */
	GPIOA->CRH	&= ~GPIO_CRH_CNF11;   /* CNF11 = 00 */
 8000f74:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <vCan_Init+0x108>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a39      	ldr	r2, [pc, #228]	; (8001060 <vCan_Init+0x108>)
 8000f7a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f7e:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF11_1;  /* CNF11 = 10 -> AF Out | Push-pull (CAN_RX) */
 8000f80:	4b37      	ldr	r3, [pc, #220]	; (8001060 <vCan_Init+0x108>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	4a36      	ldr	r2, [pc, #216]	; (8001060 <vCan_Init+0x108>)
 8000f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f8a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH 	|= GPIO_CRH_MODE11;   /* MODE8 = 11 -> Maximum output speed 50 MHz */
 8000f8c:	4b34      	ldr	r3, [pc, #208]	; (8001060 <vCan_Init+0x108>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4a33      	ldr	r2, [pc, #204]	; (8001060 <vCan_Init+0x108>)
 8000f92:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f96:	6053      	str	r3, [r2, #4]
	/* PA12 - CAN_TX */
	GPIOA->CRH	&= ~GPIO_CRH_CNF12;	  /* CNF12 = 00 */
 8000f98:	4b31      	ldr	r3, [pc, #196]	; (8001060 <vCan_Init+0x108>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a30      	ldr	r2, [pc, #192]	; (8001060 <vCan_Init+0x108>)
 8000f9e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fa2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH	|= GPIO_CRH_CNF12_1;	/* CNF12 = 10 -> AF Out | Push-pull (CAN_TX) */
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <vCan_Init+0x108>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a2d      	ldr	r2, [pc, #180]	; (8001060 <vCan_Init+0x108>)
 8000faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fae:	6053      	str	r3, [r2, #4]
	GPIOA->CRH 	|= GPIO_CRH_MODE12;   /* MODE8 = 11 -> Maximum output speed 50 MHz */
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <vCan_Init+0x108>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4a2a      	ldr	r2, [pc, #168]	; (8001060 <vCan_Init+0x108>)
 8000fb6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000fba:	6053      	str	r3, [r2, #4]
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_11, LL_GPIO_SPEED_FREQ_HIGH);
	/*TxPin*/
	LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_12, LL_GPIO_MODE_ALTERNATE);
	LL_GPIO_SetPinSpeed(GPIOA, LL_GPIO_PIN_12, LL_GPIO_SPEED_FREQ_HIGH);
#endif
	CAN1->MCR |= CAN_MCR_INRQ;						/*Start initialization*/
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <vCan_Init+0x10c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a28      	ldr	r2, [pc, #160]	; (8001064 <vCan_Init+0x10c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]
	while( 0u == (CAN1->MSR & CAN_MSR_INAK_Msk)); 	/*wait Entery in Init state*/
 8000fc8:	bf00      	nop
 8000fca:	4b26      	ldr	r3, [pc, #152]	; (8001064 <vCan_Init+0x10c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f9      	beq.n	8000fca <vCan_Init+0x72>
	CAN1->MCR &= ~CAN_MCR_DBF;						/*0: CAN working during debug*/
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <vCan_Init+0x10c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a22      	ldr	r2, [pc, #136]	; (8001064 <vCan_Init+0x10c>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_TXFP; 						/* Priority driven by the request order (chronologically)*/
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <vCan_Init+0x10c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <vCan_Init+0x10c>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	6013      	str	r3, [r2, #0]
	CAN1->MCR |= CAN_MCR_AWUM;						/*Wake up at message on buss*/
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <vCan_Init+0x10c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	; (8001064 <vCan_Init+0x10c>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	6013      	str	r3, [r2, #0]

	/*Config baud rate to 250k*/
	CAN1->BTR &= ~CAN_BTR_BRP;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <vCan_Init+0x10c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a19      	ldr	r2, [pc, #100]	; (8001064 <vCan_Init+0x10c>)
 8001000:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001004:	f023 0303 	bic.w	r3, r3, #3
 8001008:	61d3      	str	r3, [r2, #28]
	CAN1->BTR |= 8U << CAN_BTR_BRP_Pos; /* 36MHz/8 =4.5MHz */
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <vCan_Init+0x10c>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <vCan_Init+0x10c>)
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	61d3      	str	r3, [r2, #28]
	CAN1->BTR &= ~(0xFU << CAN_BTR_TS1_Pos);
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <vCan_Init+0x10c>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <vCan_Init+0x10c>)
 800101c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001020:	61d3      	str	r3, [r2, #28]
	CAN1->BTR |= 12U << CAN_BTR_TS1_Pos;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <vCan_Init+0x10c>)
 8001024:	69db      	ldr	r3, [r3, #28]
 8001026:	4a0f      	ldr	r2, [pc, #60]	; (8001064 <vCan_Init+0x10c>)
 8001028:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800102c:	61d3      	str	r3, [r2, #28]
	CAN1->BTR &= ~(7U << CAN_BTR_TS2_Pos);
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <vCan_Init+0x10c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a0c      	ldr	r2, [pc, #48]	; (8001064 <vCan_Init+0x10c>)
 8001034:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001038:	61d3      	str	r3, [r2, #28]
	CAN1->BTR |=   1U << CAN_BTR_TS2_Pos;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <vCan_Init+0x10c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a09      	ldr	r2, [pc, #36]	; (8001064 <vCan_Init+0x10c>)
 8001040:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001044:	61d3      	str	r3, [r2, #28]

#ifndef CAN_DBG_USED
	//CAN1->BTR &=~CAN_BTR_SILM;
	//CAN1->BTR |= CAN_BTR_LBKM;
#endif
	CAN1->MCR &= ~CAN_MCR_INRQ_Msk; /*Enter Normal Mode*/
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <vCan_Init+0x10c>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <vCan_Init+0x10c>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6013      	str	r3, [r2, #0]
	//while( 0u != ((CAN1->MSR & CAN_MSR_INAK_Msk) | (CAN1->MSR &CAN_MCR_SLEEP_Msk)) );

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000025 	.word	0x20000025
 800105c:	40021000 	.word	0x40021000
 8001060:	40010800 	.word	0x40010800
 8001064:	40006400 	.word	0x40006400

08001068 <Hal_Can_MainFunction>:

void Hal_Can_MainFunction(void)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
	TS_CanFrame ls_CanData = {0u};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
	if(0u == u8_CanStatus)
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <Hal_Can_MainFunction+0x68>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d110      	bne.n	80010a4 <Hal_Can_MainFunction+0x3c>
	{
		ls_CanData.u32CanFrameId = 0x50;
 8001082:	2350      	movs	r3, #80	; 0x50
 8001084:	603b      	str	r3, [r7, #0]
		ls_CanData.u8_DLC = 8u;
 8001086:	2308      	movs	r3, #8
 8001088:	713b      	strb	r3, [r7, #4]
		ls_CanData.ua8_Data[0u] = 0xAA;
 800108a:	23aa      	movs	r3, #170	; 0xaa
 800108c:	71fb      	strb	r3, [r7, #7]
		ls_CanData.ua8_Data[2u] = 0xAA;
 800108e:	23aa      	movs	r3, #170	; 0xaa
 8001090:	727b      	strb	r3, [r7, #9]
		ls_CanData.ua8_Data[4u] = 0xAA;
 8001092:	23aa      	movs	r3, #170	; 0xaa
 8001094:	72fb      	strb	r3, [r7, #11]
		ls_CanData.ua8_Data[6u] = 0xAA;
 8001096:	23aa      	movs	r3, #170	; 0xaa
 8001098:	737b      	strb	r3, [r7, #13]
		ls_CanData.ua8_Data[7u] = 0xAA;
 800109a:	23aa      	movs	r3, #170	; 0xaa
 800109c:	73bb      	strb	r3, [r7, #14]

		//Hal_Can_Transmit(&ls_CanData);
		u8_CanStatus = 1u;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <Hal_Can_MainFunction+0x68>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
	}

	if(0u != ( (CAN1->RF0R & CAN_RF0R_FMP0_Msk) | (CAN1->RF1R & CAN_RF0R_FMP0_Msk) ) )
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <Hal_Can_MainFunction+0x6c>)
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <Hal_Can_MainFunction+0x6c>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <Hal_Can_MainFunction+0x5c>
	{
		RxIndx++;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <Hal_Can_MainFunction+0x70>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <Hal_Can_MainFunction+0x70>)
 80010c2:	701a      	strb	r2, [r3, #0]
	}

}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000025 	.word	0x20000025
 80010d4:	40006400 	.word	0x40006400
 80010d8:	20000026 	.word	0x20000026

080010dc <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0320 	and.w	r3, r3, #32
 80010ec:	2b20      	cmp	r3, #32
 80010ee:	bf0c      	ite	eq
 80010f0:	2301      	moveq	r3, #1
 80010f2:	2300      	movne	r3, #0
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001110:	2b40      	cmp	r3, #64	; 0x40
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001134:	2b80      	cmp	r3, #128	; 0x80
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2db      	uxtb	r3, r3
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001156:	601a      	str	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001162:	b480      	push	{r7}
 8001164:	b089      	sub	sp, #36	; 0x24
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	330c      	adds	r3, #12
 800116e:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	e853 3f00 	ldrex	r3, [r3]
 8001176:	60bb      	str	r3, [r7, #8]
   return(result);
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f043 0320 	orr.w	r3, r3, #32
 800117e:	61fb      	str	r3, [r7, #28]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	330c      	adds	r3, #12
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	61ba      	str	r2, [r7, #24]
 8001188:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800118a:	6979      	ldr	r1, [r7, #20]
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	e841 2300 	strex	r3, r2, [r1]
 8001192:	613b      	str	r3, [r7, #16]
   return(result);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1e7      	bne.n	800116a <LL_USART_EnableIT_RXNE+0x8>
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3724      	adds	r7, #36	; 0x24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bc80      	pop	{r7}
 80011a4:	4770      	bx	lr

080011a6 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b089      	sub	sp, #36	; 0x24
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	330c      	adds	r3, #12
 80011b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	e853 3f00 	ldrex	r3, [r3]
 80011ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	330c      	adds	r3, #12
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	61ba      	str	r2, [r7, #24]
 80011cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ce:	6979      	ldr	r1, [r7, #20]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	e841 2300 	strex	r3, r2, [r1]
 80011d6:	613b      	str	r3, [r7, #16]
   return(result);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e7      	bne.n	80011ae <LL_USART_EnableIT_TC+0x8>
}
 80011de:	bf00      	nop
 80011e0:	bf00      	nop
 80011e2:	3724      	adds	r7, #36	; 0x24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b089      	sub	sp, #36	; 0x24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	330c      	adds	r3, #12
 80011f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	e853 3f00 	ldrex	r3, [r3]
 80011fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001206:	61fb      	str	r3, [r7, #28]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	330c      	adds	r3, #12
 800120c:	69fa      	ldr	r2, [r7, #28]
 800120e:	61ba      	str	r2, [r7, #24]
 8001210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001212:	6979      	ldr	r1, [r7, #20]
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	e841 2300 	strex	r3, r2, [r1]
 800121a:	613b      	str	r3, [r7, #16]
   return(result);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d1e7      	bne.n	80011f2 <LL_USART_EnableIT_TXE+0x8>
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3724      	adds	r7, #36	; 0x24
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr

0800122e <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 800122e:	b480      	push	{r7}
 8001230:	b089      	sub	sp, #36	; 0x24
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	330c      	adds	r3, #12
 800123a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	e853 3f00 	ldrex	r3, [r3]
 8001242:	60bb      	str	r3, [r7, #8]
   return(result);
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	330c      	adds	r3, #12
 8001250:	69fa      	ldr	r2, [r7, #28]
 8001252:	61ba      	str	r2, [r7, #24]
 8001254:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001256:	6979      	ldr	r1, [r7, #20]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	e841 2300 	strex	r3, r2, [r1]
 800125e:	613b      	str	r3, [r7, #16]
   return(result);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1e7      	bne.n	8001236 <LL_USART_DisableIT_TC+0x8>
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3724      	adds	r7, #36	; 0x24
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 8001272:	b480      	push	{r7}
 8001274:	b089      	sub	sp, #36	; 0x24
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	330c      	adds	r3, #12
 800127e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	e853 3f00 	ldrex	r3, [r3]
 8001286:	60bb      	str	r3, [r7, #8]
   return(result);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800128e:	61fb      	str	r3, [r7, #28]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	330c      	adds	r3, #12
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	61ba      	str	r2, [r7, #24]
 8001298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800129a:	6979      	ldr	r1, [r7, #20]
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	e841 2300 	strex	r3, r2, [r1]
 80012a2:	613b      	str	r3, [r7, #16]
   return(result);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1e7      	bne.n	800127a <LL_USART_DisableIT_TXE+0x8>
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3724      	adds	r7, #36	; 0x24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	bf0c      	ite	eq
 80012ca:	2301      	moveq	r3, #1
 80012cc:	2300      	movne	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ea:	2b40      	cmp	r3, #64	; 0x40
 80012ec:	bf0c      	ite	eq
 80012ee:	2301      	moveq	r3, #1
 80012f0:	2300      	movne	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr

080012fe <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	2b80      	cmp	r3, #128	; 0x80
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr

08001322 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	b2db      	uxtb	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8001346:	78fa      	ldrb	r2, [r7, #3]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	605a      	str	r2, [r3, #4]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
	...

08001358 <vUSART_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_Init(const void* configPtr())
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

	bUSARTInit = true;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <vUSART_Init+0x2c>)
 8001362:	2201      	movs	r2, #1
 8001364:	701a      	strb	r2, [r3, #0]
	(void)configPtr();
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4798      	blx	r3
	vCircularFIFOBuffer_Init(&TX_Buffer);
 800136a:	4807      	ldr	r0, [pc, #28]	; (8001388 <vUSART_Init+0x30>)
 800136c:	f000 faaa 	bl	80018c4 <vCircularFIFOBuffer_Init>
	vCircularFIFOBuffer_Init(&RX_Buffer);
 8001370:	4806      	ldr	r0, [pc, #24]	; (800138c <vUSART_Init+0x34>)
 8001372:	f000 faa7 	bl	80018c4 <vCircularFIFOBuffer_Init>

	vLL_USART_Init();
 8001376:	f000 f871 	bl	800145c <vLL_USART_Init>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000027 	.word	0x20000027
 8001388:	20000028 	.word	0x20000028
 800138c:	20000430 	.word	0x20000430

08001390 <vUSART_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_MainFunction(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8001396:	af00      	add	r7, sp, #0

	uint16_t u16_len;
	uint8_t tmp_Buffer[BUFFER_SIZE];

	if ( bUSARTInit == false)
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <vUSART_MainFunction+0x4c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	f083 0301 	eor.w	r3, r3, #1
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d114      	bne.n	80013d0 <vUSART_MainFunction+0x40>
		return;
	}
	else
	{
		//HAL_USART_SendBuffer(USART1, (uint8_t*)&"URA\r\n", 5, &u16_len);
		HAL_USART_ReceiveBuffer(USART1, &tmp_Buffer[0], BUFFER_SIZE, &u16_len);
 80013a6:	f207 4306 	addw	r3, r7, #1030	; 0x406
 80013aa:	1d39      	adds	r1, r7, #4
 80013ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <vUSART_MainFunction+0x50>)
 80013b2:	f000 f8c9 	bl	8001548 <HAL_USART_ReceiveBuffer>
		if (u16_len != 0u)
 80013b6:	f8b7 3406 	ldrh.w	r3, [r7, #1030]	; 0x406
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d009      	beq.n	80013d2 <vUSART_MainFunction+0x42>
		{
			HAL_USART_SendBuffer(USART1, &tmp_Buffer[0], u16_len, &u16_len);
 80013be:	f8b7 2406 	ldrh.w	r2, [r7, #1030]	; 0x406
 80013c2:	f207 4306 	addw	r3, r7, #1030	; 0x406
 80013c6:	1d39      	adds	r1, r7, #4
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <vUSART_MainFunction+0x50>)
 80013ca:	f000 f88b 	bl	80014e4 <HAL_USART_SendBuffer>
 80013ce:	e000      	b.n	80013d2 <vUSART_MainFunction+0x42>
		return;
 80013d0:	bf00      	nop
		}

	}


}
 80013d2:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000027 	.word	0x20000027
 80013e0:	40013800 	.word	0x40013800

080013e4 <vUSART_ITCallBack>:
 * @brief:
 * Parameters:
 * Return:
 */
void vUSART_ITCallBack(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0

	if( (false != LL_USART_IsActiveFlag_RXNE(USART1)) && (false != LL_USART_IsEnabledIT_RXNE(USART1)) )
 80013e8:	481a      	ldr	r0, [pc, #104]	; (8001454 <vUSART_ITCallBack+0x70>)
 80013ea:	f7ff fe77 	bl	80010dc <LL_USART_IsActiveFlag_RXNE>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00d      	beq.n	8001410 <vUSART_ITCallBack+0x2c>
 80013f4:	4817      	ldr	r0, [pc, #92]	; (8001454 <vUSART_ITCallBack+0x70>)
 80013f6:	f7ff ff5e 	bl	80012b6 <LL_USART_IsEnabledIT_RXNE>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <vUSART_ITCallBack+0x2c>
	{
		bCircularFIFOBuffer_addElement(&RX_Buffer, LL_USART_ReceiveData8(USART1));
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <vUSART_ITCallBack+0x70>)
 8001402:	f7ff ff8e 	bl	8001322 <LL_USART_ReceiveData8>
 8001406:	4603      	mov	r3, r0
 8001408:	4619      	mov	r1, r3
 800140a:	4813      	ldr	r0, [pc, #76]	; (8001458 <vUSART_ITCallBack+0x74>)
 800140c:	f000 faac 	bl	8001968 <bCircularFIFOBuffer_addElement>
	}

	if( (false != LL_USART_IsActiveFlag_TXE(USART1)) && (false != LL_USART_IsEnabledIT_TXE(USART1)) )
 8001410:	4810      	ldr	r0, [pc, #64]	; (8001454 <vUSART_ITCallBack+0x70>)
 8001412:	f7ff fe87 	bl	8001124 <LL_USART_IsActiveFlag_TXE>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <vUSART_ITCallBack+0x48>
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <vUSART_ITCallBack+0x70>)
 800141e:	f7ff ff6e 	bl	80012fe <LL_USART_IsEnabledIT_TXE>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <vUSART_ITCallBack+0x48>
	{
		vHal_USART_PublishData();
 8001428:	f000 f8be 	bl	80015a8 <vHal_USART_PublishData>
	}


	if( (false != LL_USART_IsActiveFlag_TC(USART1)) && (false != LL_USART_IsEnabledIT_TC(USART1)) )
 800142c:	4809      	ldr	r0, [pc, #36]	; (8001454 <vUSART_ITCallBack+0x70>)
 800142e:	f7ff fe67 	bl	8001100 <LL_USART_IsActiveFlag_TC>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d00b      	beq.n	8001450 <vUSART_ITCallBack+0x6c>
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <vUSART_ITCallBack+0x70>)
 800143a:	f7ff ff4e 	bl	80012da <LL_USART_IsEnabledIT_TC>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <vUSART_ITCallBack+0x6c>
	{
		LL_USART_DisableIT_TC(USART1);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <vUSART_ITCallBack+0x70>)
 8001446:	f7ff fef2 	bl	800122e <LL_USART_DisableIT_TC>
		LL_USART_ClearFlag_TC(USART1);
 800144a:	4802      	ldr	r0, [pc, #8]	; (8001454 <vUSART_ITCallBack+0x70>)
 800144c:	f7ff fe7c 	bl	8001148 <LL_USART_ClearFlag_TC>
	}



}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40013800 	.word	0x40013800
 8001458:	20000430 	.word	0x20000430

0800145c <vLL_USART_Init>:

static void vLL_USART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	LL_USART_EnableIT_RXNE(USART1);
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <vLL_USART_Init+0x10>)
 8001462:	f7ff fe7e 	bl	8001162 <LL_USART_EnableIT_RXNE>
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40013800 	.word	0x40013800

08001470 <HAL_USART_GetChar>:



TE_ERROR HAL_USART_GetChar(TS_USART* USARTx, uint8_t* Data)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	uint8_t u8_Data = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	73fb      	strb	r3, [r7, #15]
	if (false != bCircularFIFOBuffer_getElement(&RX_Buffer, (uint8_t*) &u8_Data) )
 800147e:	f107 030f 	add.w	r3, r7, #15
 8001482:	4619      	mov	r1, r3
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <HAL_USART_GetChar+0x34>)
 8001486:	f000 fa38 	bl	80018fa <bCircularFIFOBuffer_getElement>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d004      	beq.n	800149a <HAL_USART_GetChar+0x2a>
	{
		*Data = u8_Data;
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	701a      	strb	r2, [r3, #0]
		return ERR_OK;
 8001496:	2300      	movs	r3, #0
 8001498:	e000      	b.n	800149c <HAL_USART_GetChar+0x2c>
	}
	else
	{
		return ERR_NOK;
 800149a:	2301      	movs	r3, #1
	}


}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000430 	.word	0x20000430

080014a8 <HAL_USART_SendChar>:


TE_ERROR HAL_USART_SendChar(TS_USART* USARTx, uint8_t Data)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	460b      	mov	r3, r1
 80014b2:	70fb      	strb	r3, [r7, #3]

	TE_ERROR eRetStatut = ERR_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	73fb      	strb	r3, [r7, #15]

	if(false == bCircularFIFOBuffer_addElement(&TX_Buffer, Data) )
 80014b8:	78fb      	ldrb	r3, [r7, #3]
 80014ba:	4619      	mov	r1, r3
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <HAL_USART_SendChar+0x38>)
 80014be:	f000 fa53 	bl	8001968 <bCircularFIFOBuffer_addElement>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f083 0301 	eor.w	r3, r3, #1
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_USART_SendChar+0x2a>
	{

		eRetStatut = ERR_BUFFER_FULL;
 80014ce:	2302      	movs	r3, #2
 80014d0:	73fb      	strb	r3, [r7, #15]
	}

	vHal_USART_PublishData();
 80014d2:	f000 f869 	bl	80015a8 <vHal_USART_PublishData>

	return eRetStatut;
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000028 	.word	0x20000028

080014e4 <HAL_USART_SendBuffer>:



TE_ERROR HAL_USART_SendBuffer(TS_USART* USARTx, uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	80fb      	strh	r3, [r7, #6]
	uint16_t u16_Len = 0u;
 80014f4:	2300      	movs	r3, #0
 80014f6:	82fb      	strh	r3, [r7, #22]
	*RecievedLen = 0u;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	801a      	strh	r2, [r3, #0]

	while (Len > u16_Len)
 80014fe:	e017      	b.n	8001530 <HAL_USART_SendBuffer+0x4c>
	{
		if (ERR_OK == HAL_USART_SendChar( USART1, *Data))
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	480f      	ldr	r0, [pc, #60]	; (8001544 <HAL_USART_SendBuffer+0x60>)
 8001508:	f7ff ffce 	bl	80014a8 <HAL_USART_SendChar>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_USART_SendBuffer+0x48>
		{
			Data++;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3301      	adds	r3, #1
 8001516:	60bb      	str	r3, [r7, #8]
			u16_Len++;
 8001518:	8afb      	ldrh	r3, [r7, #22]
 800151a:	3301      	adds	r3, #1
 800151c:	82fb      	strh	r3, [r7, #22]
			(*RecievedLen)++;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	b29a      	uxth	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	801a      	strh	r2, [r3, #0]
 800152a:	e001      	b.n	8001530 <HAL_USART_SendBuffer+0x4c>
		}
		else
		{
			return ERR_BUFFER_FULL;
 800152c:	2302      	movs	r3, #2
 800152e:	e004      	b.n	800153a <HAL_USART_SendBuffer+0x56>
	while (Len > u16_Len)
 8001530:	88fa      	ldrh	r2, [r7, #6]
 8001532:	8afb      	ldrh	r3, [r7, #22]
 8001534:	429a      	cmp	r2, r3
 8001536:	d8e3      	bhi.n	8001500 <HAL_USART_SendBuffer+0x1c>
		}
	}

	return ERR_OK;
 8001538:	2300      	movs	r3, #0

}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013800 	.word	0x40013800

08001548 <HAL_USART_ReceiveBuffer>:

TE_ERROR HAL_USART_ReceiveBuffer(TS_USART* USARTx, uint8_t* Data, uint16_t Len, uint16_t* RecievedLen)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	80fb      	strh	r3, [r7, #6]


	uint16_t u16_Len = 0u;
 8001558:	2300      	movs	r3, #0
 800155a:	82fb      	strh	r3, [r7, #22]
	*RecievedLen = 0u;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2200      	movs	r2, #0
 8001560:	801a      	strh	r2, [r3, #0]

	while (Len > u16_Len)
 8001562:	e015      	b.n	8001590 <HAL_USART_ReceiveBuffer+0x48>
	{
		if (ERR_OK == HAL_USART_GetChar( USART1, Data))
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	480f      	ldr	r0, [pc, #60]	; (80015a4 <HAL_USART_ReceiveBuffer+0x5c>)
 8001568:	f7ff ff82 	bl	8001470 <HAL_USART_GetChar>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10c      	bne.n	800158c <HAL_USART_ReceiveBuffer+0x44>
		{
			Data++;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	60bb      	str	r3, [r7, #8]
			u16_Len++;
 8001578:	8afb      	ldrh	r3, [r7, #22]
 800157a:	3301      	adds	r3, #1
 800157c:	82fb      	strh	r3, [r7, #22]
			(*RecievedLen)++;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	3301      	adds	r3, #1
 8001584:	b29a      	uxth	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	801a      	strh	r2, [r3, #0]
 800158a:	e001      	b.n	8001590 <HAL_USART_ReceiveBuffer+0x48>
		}
		else
		{
			return ERR_BUFFER_EMPTY;
 800158c:	2303      	movs	r3, #3
 800158e:	e004      	b.n	800159a <HAL_USART_ReceiveBuffer+0x52>
	while (Len > u16_Len)
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	8afb      	ldrh	r3, [r7, #22]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8e5      	bhi.n	8001564 <HAL_USART_ReceiveBuffer+0x1c>
		}
	}

	return ERR_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40013800 	.word	0x40013800

080015a8 <vHal_USART_PublishData>:

static void vHal_USART_PublishData(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	uint8_t u8_Data = 0u;
 80015ae:	2300      	movs	r3, #0
 80015b0:	71fb      	strb	r3, [r7, #7]

	while( (false == bCircularFIFOBuffer_isEmpty(&TX_Buffer)) && (0u != LL_USART_IsActiveFlag_TXE(USART1)))
 80015b2:	e009      	b.n	80015c8 <vHal_USART_PublishData+0x20>
	{
		bCircularFIFOBuffer_getElement(&TX_Buffer, (uint8_t*) &u8_Data);
 80015b4:	1dfb      	adds	r3, r7, #7
 80015b6:	4619      	mov	r1, r3
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <vHal_USART_PublishData+0x90>)
 80015ba:	f000 f99e 	bl	80018fa <bCircularFIFOBuffer_getElement>
		LL_USART_TransmitData8(USART1, u8_Data);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	4619      	mov	r1, r3
 80015c2:	481e      	ldr	r0, [pc, #120]	; (800163c <vHal_USART_PublishData+0x94>)
 80015c4:	f7ff feb9 	bl	800133a <LL_USART_TransmitData8>
	while( (false == bCircularFIFOBuffer_isEmpty(&TX_Buffer)) && (0u != LL_USART_IsActiveFlag_TXE(USART1)))
 80015c8:	481b      	ldr	r0, [pc, #108]	; (8001638 <vHal_USART_PublishData+0x90>)
 80015ca:	f000 f96b 	bl	80018a4 <bCircularFIFOBuffer_isEmpty>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f083 0301 	eor.w	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <vHal_USART_PublishData+0x3e>
 80015da:	4818      	ldr	r0, [pc, #96]	; (800163c <vHal_USART_PublishData+0x94>)
 80015dc:	f7ff fda2 	bl	8001124 <LL_USART_IsActiveFlag_TXE>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1e6      	bne.n	80015b4 <vHal_USART_PublishData+0xc>
	}

	if(false == bCircularFIFOBuffer_isEmpty(&TX_Buffer))
 80015e6:	4814      	ldr	r0, [pc, #80]	; (8001638 <vHal_USART_PublishData+0x90>)
 80015e8:	f000 f95c 	bl	80018a4 <bCircularFIFOBuffer_isEmpty>
 80015ec:	4603      	mov	r3, r0
 80015ee:	f083 0301 	eor.w	r3, r3, #1
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d009      	beq.n	800160c <vHal_USART_PublishData+0x64>
	{
		if(false == LL_USART_IsEnabledIT_TXE(USART1))
 80015f8:	4810      	ldr	r0, [pc, #64]	; (800163c <vHal_USART_PublishData+0x94>)
 80015fa:	f7ff fe80 	bl	80012fe <LL_USART_IsEnabledIT_TXE>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d115      	bne.n	8001630 <vHal_USART_PublishData+0x88>
		{
			LL_USART_EnableIT_TXE(USART1);
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <vHal_USART_PublishData+0x94>)
 8001606:	f7ff fdf0 	bl	80011ea <LL_USART_EnableIT_TXE>
		if(false == LL_USART_IsEnabledIT_TC(USART1))
		{
			LL_USART_EnableIT_TC(USART1);
		}
	}
}
 800160a:	e011      	b.n	8001630 <vHal_USART_PublishData+0x88>
		if(false != LL_USART_IsEnabledIT_TXE(USART1))
 800160c:	480b      	ldr	r0, [pc, #44]	; (800163c <vHal_USART_PublishData+0x94>)
 800160e:	f7ff fe76 	bl	80012fe <LL_USART_IsEnabledIT_TXE>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <vHal_USART_PublishData+0x76>
			LL_USART_DisableIT_TXE(USART1);
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <vHal_USART_PublishData+0x94>)
 800161a:	f7ff fe2a 	bl	8001272 <LL_USART_DisableIT_TXE>
		if(false == LL_USART_IsEnabledIT_TC(USART1))
 800161e:	4807      	ldr	r0, [pc, #28]	; (800163c <vHal_USART_PublishData+0x94>)
 8001620:	f7ff fe5b 	bl	80012da <LL_USART_IsEnabledIT_TC>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d102      	bne.n	8001630 <vHal_USART_PublishData+0x88>
			LL_USART_EnableIT_TC(USART1);
 800162a:	4804      	ldr	r0, [pc, #16]	; (800163c <vHal_USART_PublishData+0x94>)
 800162c:	f7ff fdbb 	bl	80011a6 <LL_USART_EnableIT_TC>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000028 	.word	0x20000028
 800163c:	40013800 	.word	0x40013800

08001640 <__NVIC_SetPriority>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0a      	blt.n	800166a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	b2da      	uxtb	r2, r3
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <__NVIC_SetPriority+0x4c>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	0112      	lsls	r2, r2, #4
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	440b      	add	r3, r1
 8001664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001668:	e00a      	b.n	8001680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	b2da      	uxtb	r2, r3
 800166e:	4908      	ldr	r1, [pc, #32]	; (8001690 <__NVIC_SetPriority+0x50>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3b04      	subs	r3, #4
 8001678:	0112      	lsls	r2, r2, #4
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	440b      	add	r3, r1
 800167e:	761a      	strb	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ffc2 	bl	8001640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <vInit>:
 * @brief:
 * Parameters:
 * Return:
 */
void vInit(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0

#ifdef USE_SYS
	LL_RCC_ClocksTypeDef rcc_clocks;
	LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80016de:	463b      	mov	r3, r7
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff f9e9 	bl	8000ab8 <LL_RCC_GetSystemClocksFreq>
	vSys_Init((void*)SysTick_Config(rcc_clocks.SYSCLK_Frequency/1000));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	4a0d      	ldr	r2, [pc, #52]	; (8001720 <vInit+0x48>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ffcf 	bl	8001694 <SysTick_Config>
 80016f6:	4603      	mov	r3, r0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f815 	bl	8001728 <vSys_Init>
#endif

#ifdef USE_LED
	vLed_Init(NULL_PTR);
 80016fe:	2000      	movs	r0, #0
 8001700:	f7ff fbde 	bl	8000ec0 <vLed_Init>
#else
	MX_GPIO_Init();
#endif

#ifdef USE_USART
	vUSART_Init((void*)MX_USART1_UART_Init);
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <vInit+0x4c>)
 8001706:	f7ff fe27 	bl	8001358 <vUSART_Init>
#endif

#ifdef USE_CAN
	vCan_Init();
 800170a:	f7ff fc25 	bl	8000f58 <vCan_Init>
#endif

#ifdef USE_SCHM
	vSchM_Init(NULL_PTR);
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f830 	bl	8001774 <vSchM_Init>
	vSchM_MainFunction();
 8001714:	f000 f83c 	bl	8001790 <vSchM_MainFunction>
	while (1)
		;
#endif


}
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	10624dd3 	.word	0x10624dd3
 8001724:	080005f5 	.word	0x080005f5

08001728 <vSys_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSys_Init(const void* configPtr)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

	bSysInit = true;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <vSys_Init+0x18>)
 8001732:	2201      	movs	r2, #1
 8001734:	701a      	strb	r2, [r3, #0]
	(void)configPtr;
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	20000836 	.word	0x20000836

08001744 <u32Sys_GetRunTime>:
 * @brief:
 * Parameters:
 * Return:
 */
uint32_t u32Sys_GetRunTime(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
	return u32_RunTime;
 8001748:	4b02      	ldr	r3, [pc, #8]	; (8001754 <u32Sys_GetRunTime+0x10>)
 800174a:	681b      	ldr	r3, [r3, #0]
}
 800174c:	4618      	mov	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	20000838 	.word	0x20000838

08001758 <vSysRunModeTick>:
 * @brief:
 * Parameters:
 * Return:
 */
volatile void vSysRunModeTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

	u32_RunTime++;
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <vSysRunModeTick+0x18>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	4a03      	ldr	r2, [pc, #12]	; (8001770 <vSysRunModeTick+0x18>)
 8001764:	6013      	str	r3, [r2, #0]

}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000838 	.word	0x20000838

08001774 <vSchM_Init>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_Init(const void* configPtr)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	bSchmInit = true;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <vSchM_Init+0x18>)
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]

	(void)configPtr;
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	2000083c 	.word	0x2000083c

08001790 <vSchM_MainFunction>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_MainFunction(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0

	while (1)
	{
		if (bSchmInit == false)
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <vSchM_MainFunction+0x90>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	f083 0301 	eor.w	r3, r3, #1
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d13c      	bne.n	800181c <vSchM_MainFunction+0x8c>
		{
			return;
		}
		else
		{
			vSchM_IdleTask();
 80017a2:	f000 f841 	bl	8001828 <vSchM_IdleTask>
			if (Sys_GetRunTime() ^ u32_ScheduleCycle_Sample)
 80017a6:	f7ff ffcd 	bl	8001744 <u32Sys_GetRunTime>
 80017aa:	4602      	mov	r2, r0
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <vSchM_MainFunction+0x94>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d0ef      	beq.n	8001794 <vSchM_MainFunction+0x4>
			{

				u32_ScheduleCycle_Sample = Sys_GetRunTime();
 80017b4:	f7ff ffc6 	bl	8001744 <u32Sys_GetRunTime>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4a1a      	ldr	r2, [pc, #104]	; (8001824 <vSchM_MainFunction+0x94>)
 80017bc:	6013      	str	r3, [r2, #0]
				vSchM_BaseRecurrenceTask();
 80017be:	f000 f839 	bl	8001834 <vSchM_BaseRecurrenceTask>
				if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_2)
 80017c2:	4b18      	ldr	r3, [pc, #96]	; (8001824 <vSchM_MainFunction+0x94>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <vSchM_MainFunction+0x44>
				{
					vSchM_BaseRecurrenceTaskDiv2();
 80017ce:	f000 f837 	bl	8001840 <vSchM_BaseRecurrenceTaskDiv2>
 80017d2:	e7df      	b.n	8001794 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_4)
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <vSchM_MainFunction+0x94>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <vSchM_MainFunction+0x56>
				{
					vSchM_BaseRecurrenceTaskDiv4();
 80017e0:	f000 f834 	bl	800184c <vSchM_BaseRecurrenceTaskDiv4>
 80017e4:	e7d6      	b.n	8001794 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_8)
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <vSchM_MainFunction+0x94>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <vSchM_MainFunction+0x68>
				{
					vSchM_BaseRecurrenceTaskDiv8();
 80017f2:	f000 f831 	bl	8001858 <vSchM_BaseRecurrenceTaskDiv8>
 80017f6:	e7cd      	b.n	8001794 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_16)
 80017f8:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <vSchM_MainFunction+0x94>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <vSchM_MainFunction+0x7a>
				{
					vSchM_BaseRecurrenceTaskDiv16();
 8001804:	f000 f82e 	bl	8001864 <vSchM_BaseRecurrenceTaskDiv16>
 8001808:	e7c4      	b.n	8001794 <vSchM_MainFunction+0x4>
				}
				else if (u32_ScheduleCycle_Sample & SCHM_BASE_DIV_32)
 800180a:	4b06      	ldr	r3, [pc, #24]	; (8001824 <vSchM_MainFunction+0x94>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0be      	beq.n	8001794 <vSchM_MainFunction+0x4>
				{
					vSchM_BaseRecurrenceTaskDiv32();
 8001816:	f000 f82b 	bl	8001870 <vSchM_BaseRecurrenceTaskDiv32>
		if (bSchmInit == false)
 800181a:	e7bb      	b.n	8001794 <vSchM_MainFunction+0x4>
			return;
 800181c:	bf00      	nop
					;
				}
			}
		}
	}
}
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000083c 	.word	0x2000083c
 8001824:	20000840 	.word	0x20000840

08001828 <vSchM_IdleTask>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_IdleTask(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <vSchM_BaseRecurrenceTask>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTask	(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	vLed_MainFunction();
 8001838:	f7ff fb50 	bl	8000edc <vLed_MainFunction>
}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}

08001840 <vSchM_BaseRecurrenceTaskDiv2>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv2(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0


}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <vSchM_BaseRecurrenceTaskDiv4>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv4(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0


}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <vSchM_BaseRecurrenceTaskDiv8>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv8(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0


}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <vSchM_BaseRecurrenceTaskDiv16>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv16(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0


}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <vSchM_BaseRecurrenceTaskDiv32>:
 * @brief:
 * Parameters:
 * Return:
 */
void vSchM_BaseRecurrenceTaskDiv32(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
#ifdef USE_USART
	vUSART_MainFunction();
 8001874:	f7ff fd8c 	bl	8001390 <vUSART_MainFunction>
#endif
#ifdef USE_CAN
	Hal_Can_MainFunction();
 8001878:	f7ff fbf6 	bl	8001068 <Hal_Can_MainFunction>
#endif
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}

08001880 <bCircularFIFOBuffer_isFull>:

#include "CircularFIFOBuffer.h"

//***********************************************************************************************

bool bCircularFIFOBuffer_isFull(TS_CircularFIFOBuffer* rg_Buffer){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	if ((BUFFER_SIZE-1u) == rg_Buffer->u16_BufferSize)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <bCircularFIFOBuffer_isFull+0x18>
	{
		return true ;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <bCircularFIFOBuffer_isFull+0x1a>
	}
	else
	{
		return false;
 8001898:	2300      	movs	r3, #0
	}
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <bCircularFIFOBuffer_isEmpty>:

bool bCircularFIFOBuffer_isEmpty(TS_CircularFIFOBuffer* rg_Buffer){
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

	if( 0u == rg_Buffer->u16_BufferSize )
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	881b      	ldrh	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <bCircularFIFOBuffer_isEmpty+0x14>
	{
		return true ;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e000      	b.n	80018ba <bCircularFIFOBuffer_isEmpty+0x16>
	}
	else
	{
		return false;
 80018b8:	2300      	movs	r3, #0
	}
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <vCircularFIFOBuffer_Init>:



void vCircularFIFOBuffer_Init(TS_CircularFIFOBuffer* rg_Buffer)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	memset(rg_Buffer->Buffer, 0, BUFFER_SIZE);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3302      	adds	r3, #2
 80018d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f87d 	bl	80019d6 <memset>

	rg_Buffer->u16_BufferSize = 0u;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	801a      	strh	r2, [r3, #0]
	rg_Buffer->first = 0u;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	rg_Buffer->next = 0u;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <bCircularFIFOBuffer_getElement>:


// Get the first element from the FIFO queue
bool bCircularFIFOBuffer_getElement(TS_CircularFIFOBuffer* rg_Buffer, uint8_t* theElement)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
	if ( false == bCircularFIFOBuffer_isEmpty(rg_Buffer))
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffcd 	bl	80018a4 <bCircularFIFOBuffer_isEmpty>
 800190a:	4603      	mov	r3, r0
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d023      	beq.n	800195e <bCircularFIFOBuffer_getElement+0x64>
	{
		*theElement = rg_Buffer->Buffer[rg_Buffer->first];
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800191c:	461a      	mov	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	789a      	ldrb	r2, [r3, #2]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	701a      	strb	r2, [r3, #0]
		if ( rg_Buffer->first != BUFFER_SIZE )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800192e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001932:	d008      	beq.n	8001946 <bCircularFIFOBuffer_getElement+0x4c>
		{
			rg_Buffer->first++;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800193a:	3301      	adds	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
 8001944:	e003      	b.n	800194e <bCircularFIFOBuffer_getElement+0x54>
		}
		else
		{
			rg_Buffer->first = 0;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
		rg_Buffer->u16_BufferSize--;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	3b01      	subs	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	801a      	strh	r2, [r3, #0]
	else
	{
		return false;
	}

	return true;// Return !0 always if it is not empty
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <bCircularFIFOBuffer_getElement+0x66>
		return false;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <bCircularFIFOBuffer_addElement>:

// Add an element to the FIFO queue
bool bCircularFIFOBuffer_addElement(TS_CircularFIFOBuffer* rg_Buffer, uint8_t data)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	460b      	mov	r3, r1
 8001972:	70fb      	strb	r3, [r7, #3]
	if(false == bCircularFIFOBuffer_isFull(rg_Buffer))
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff83 	bl	8001880 <bCircularFIFOBuffer_isFull>
 800197a:	4603      	mov	r3, r0
 800197c:	f083 0301 	eor.w	r3, r3, #1
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d022      	beq.n	80019cc <bCircularFIFOBuffer_addElement+0x64>
	{
		rg_Buffer->Buffer[rg_Buffer->next] = data;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	709a      	strb	r2, [r3, #2]
		if ( rg_Buffer->next != BUFFER_SIZE )
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 800199c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a0:	d008      	beq.n	80019b4 <bCircularFIFOBuffer_addElement+0x4c>
		{
			rg_Buffer->next++;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 80019a8:	3301      	adds	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
 80019b2:	e003      	b.n	80019bc <bCircularFIFOBuffer_addElement+0x54>
		}
		else
		{
			rg_Buffer->next = 0;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		}
		rg_Buffer->u16_BufferSize++;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	801a      	strh	r2, [r3, #0]
		return true;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <bCircularFIFOBuffer_addElement+0x66>
	}
	else
	{
		return false;
 80019cc:	2300      	movs	r3, #0
	}
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <memset>:
 80019d6:	4603      	mov	r3, r0
 80019d8:	4402      	add	r2, r0
 80019da:	4293      	cmp	r3, r2
 80019dc:	d100      	bne.n	80019e0 <memset+0xa>
 80019de:	4770      	bx	lr
 80019e0:	f803 1b01 	strb.w	r1, [r3], #1
 80019e4:	e7f9      	b.n	80019da <memset+0x4>
	...

080019e8 <__libc_init_array>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	2600      	movs	r6, #0
 80019ec:	4d0c      	ldr	r5, [pc, #48]	; (8001a20 <__libc_init_array+0x38>)
 80019ee:	4c0d      	ldr	r4, [pc, #52]	; (8001a24 <__libc_init_array+0x3c>)
 80019f0:	1b64      	subs	r4, r4, r5
 80019f2:	10a4      	asrs	r4, r4, #2
 80019f4:	42a6      	cmp	r6, r4
 80019f6:	d109      	bne.n	8001a0c <__libc_init_array+0x24>
 80019f8:	f000 f81a 	bl	8001a30 <_init>
 80019fc:	2600      	movs	r6, #0
 80019fe:	4d0a      	ldr	r5, [pc, #40]	; (8001a28 <__libc_init_array+0x40>)
 8001a00:	4c0a      	ldr	r4, [pc, #40]	; (8001a2c <__libc_init_array+0x44>)
 8001a02:	1b64      	subs	r4, r4, r5
 8001a04:	10a4      	asrs	r4, r4, #2
 8001a06:	42a6      	cmp	r6, r4
 8001a08:	d105      	bne.n	8001a16 <__libc_init_array+0x2e>
 8001a0a:	bd70      	pop	{r4, r5, r6, pc}
 8001a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a10:	4798      	blx	r3
 8001a12:	3601      	adds	r6, #1
 8001a14:	e7ee      	b.n	80019f4 <__libc_init_array+0xc>
 8001a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1a:	4798      	blx	r3
 8001a1c:	3601      	adds	r6, #1
 8001a1e:	e7f2      	b.n	8001a06 <__libc_init_array+0x1e>
 8001a20:	08001a60 	.word	0x08001a60
 8001a24:	08001a60 	.word	0x08001a60
 8001a28:	08001a60 	.word	0x08001a60
 8001a2c:	08001a64 	.word	0x08001a64

08001a30 <_init>:
 8001a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a32:	bf00      	nop
 8001a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a36:	bc08      	pop	{r3}
 8001a38:	469e      	mov	lr, r3
 8001a3a:	4770      	bx	lr

08001a3c <_fini>:
 8001a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a3e:	bf00      	nop
 8001a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a42:	bc08      	pop	{r3}
 8001a44:	469e      	mov	lr, r3
 8001a46:	4770      	bx	lr
